{"title":"[数据结构]软件包管理器（bzoj 4196）","time_limit":1000,"memory_limit":512,"tags":[],"operation":{"submit":"https://oj.iqzsy.xyz/problem/1171#submit_code","submissions":"https://oj.iqzsy.xyz/submissions?problem_id=1171","statistics":"https://oj.iqzsy.xyz/problem/1171/statistics/fastest","testdata":"https://oj.iqzsy.xyz/problem/1171/testdata","discussion":"https://oj.iqzsy.xyz/discussion/problem/1171"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"Linux用户和OSX用户一定对软件包管理器不会陌生。通过软件包管理器，你可以通过一行命令安装某一个软件包，然后软件包管理器会帮助你从软件源下载软件包，同时自动解决所有的依赖（即下载安装这个软件包的安装所依赖的其它软件包），完成所有的配置。Debian/Ubuntu使用的apt-get，Fedora/CentOS使用的yum，以及OSX下可用的homebrew都是优秀的软件包管理器。\r\n\r\n你决定设计你自己的软件包管理器。不可避免地，你要解决软件包之间的依赖问题。如果软件包A依赖软件包B，那么安装软件包A以前，必须先安装软件包B。同时，如果想要卸载软件包B，则必须卸载软件包A。现在你已经获得了所有的软件包之间的依赖关系。而且，由于你之前的工作，除0号软件包以外，在你的管理器当中的软件包都会依赖一个且仅一个软件包，而0号软件包不依赖任何一个软件包。依赖关系不存在环（若有m(m≥2)个软件包A1,A2,A3,…,Am，其中A1依赖A2，A2依赖A3，A3依赖A4，……，Am−1依赖Am，而Am依赖A1，则称这m个软件包的依赖关系构成环），当然也不会有一个软件包依赖自己。\r\n现在你要为你的软件包管理器写一个依赖解决程序。根据反馈，用户希望在安装和卸载某个软件包时，快速地知道这个操作实际上会改变多少个软件包的安装状态（即安装操作会安装多少个未安装的软件包，或卸载操作会卸载多少个已安装的软件包），你的任务就是实现这个部分。注意，安装一个已安装的软件包，或卸载一个未安装的软件包，都不会改变任何软件包的安装状态，即在此情况下，改变安装状态的软件包数为0。"},{"title":"输入格式","type":"input_format","format":"markdown","require":["katex"],"content":"输入文件的第1行包含1个正整数n，表示软件包的总数。软件包从0开始编号。\r\n\r\n随后一行包含n−1个整数，相邻整数之间用单个空格隔开，分别表示1,2,3,…,n−2,n−1号软件包依赖的软件包的编号。\r\n接下来一行包含1个正整数q，表示询问的总数。\r\n之后q行，每行1个询问。询问分为两种：\r\ninstallx：表示安装软件包x\r\nuninstallx：表示卸载软件包x\r\n你需要维护每个软件包的安装状态，一开始所有的软件包都处于未安装状态。对于每个操作，你需要输出这步操作会改变多少个软件包的安装状态，随后应用这个操作（即改变你维护的安装状态）。"},{"title":"输出格式","type":"output_format","format":"markdown","require":["katex"],"content":"输出文件包括q行。\r\n\r\n输出文件的第i行输出1个整数，为第i步操作中改变安装状态的软件包数。"},{"title":"样例","type":"example","format":"markdown","require":["katex"],"content":"Sample Input\r\n```\r\n7\r\n0 0 0 1 1 5\r\n5\r\ninstall 5\r\ninstall 6\r\nuninstall 1\r\ninstall 4\r\nuninstall 0\r\n```\r\nSample Output\r\n```\r\n3\r\n1\r\n3\r\n2\r\n3\r\n```"}]}