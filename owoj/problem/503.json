{"title":"「T Round 1」std::tr1::lca","time_limit":1000,"memory_limit":256,"tags":["T Round 1","树论","LCA","子任务","交互题"],"operation":{"submit":"https://oj.akioi.ml:8200/problem/503#submit_code","submissions":"https://oj.akioi.ml:8200/submissions?problem_id=503","statistics":"https://oj.akioi.ml:8200/problem/503/statistics/fastest","testdata":"https://oj.akioi.ml:8200/problem/503/testdata","discussion":"https://oj.akioi.ml:8200/discussion/problem/503"},"statement":[{"title":"题目描述","type":"description","format":"markdown","require":["katex"],"content":"<font color=red>注意，交互库的复杂度是单次 $O(\\log n)$，`interactor.cpp` 和 `interaction.hpp` 已经包含在附加文件里。</font>\r\n\r\n众所周知，「　」只输过一局游戏，对手是 Flamire。\r\n\r\ncdecl 和可爱的 Flamire 小姐姐一起玩游戏。\r\n\r\ncdecl 画了一棵 $n$ 个点的有根树，点按 $1\\sim n$ 编号，让 Flamire 猜这棵树的根。Flamire 每次可以选两个点，然后 cdecl 会告诉 Flamire 这两个点的 LCA。\r\n\r\n然后 Flamire 每次连 LCA 都没查就直接报出了根的编号，然后把 cdecl D 了一顿就走了。\r\n\r\n被 D 了的 cdecl 只好来找您玩这个游戏 +_+\r\n\r\n---\r\n\r\n一句话题面：有一棵 $n$ 个点的，形态未知的有根树，点按 $1\\sim n$ 编号。每次操作可以询问两个点的 LCA，用尽可能少的次数求出根的编号。\r\n\r\n---\r\n\r\n### 交互方式\r\n\r\n#### 不使用交互库\r\n\r\n有三种操作：\r\n\r\n1. `get`：获取树上点的数量 $n$。本操作不包含参数。\r\n2. `lca`：查询两个点的 LCA。本操作包含 $2$ 个参数：要查询的两个点的编号 $x,y$。返回值为 $\\operatorname{LCA}(x,y)$ 的编号。\r\n3. `submit`：提交猜测结果。本操作包含 $1$ 个参数 $rt$，即这棵树的根。本操作没有返回值。\r\n\r\n当你想要进行某个操作时，请向标准输出流中写入如下格式的字符串：\r\n\r\n```plain\r\n<操作名称> <操作参数 1> <操作参数 2> ... <操作参数 n>\r\n```\r\n\r\n你 **必须** 在请求后追加换行符；多余的空白字符将被自动忽略。\r\n\r\n在收到用户程序发送的请求后，交互器会向用户程序的标准输入流中发送返回值。你只需在你的程序中使用通常的办法读入这个值，就好像是从控制台或文件中读取内容一样。交互器将在发送返回值后再附加一个换行符 `\\n`，以便于用户程序读入。本题目的操作返回值都是数字，因此直接读入数字即可。\r\n\r\n请注意，很多语言的输入 / 输出库都会带有缓存，请在写入操作请求后手动刷新缓存，以确保请求顺利递送。\r\n\r\nC++ 语言可以这样刷新缓存（`std::endl` 会自动刷新缓存）：\r\n\r\n```cpp\r\nstd::cout << std::flush;\r\n// 或 std::cout << value << std::endl;\r\n// 或 fflush(stdout);\r\n```\r\n\r\n提交猜测结果后，即可结束程序。交互器退出时，如果用户程序还在运行，就会被立即终止，但不会引发超时错误。\r\n\r\n#### 使用交互库\r\n\r\n对于 C++ 与 C++11 选手，我们提供交互库 `interaction.hpp`，您将可以通过题目上方的「附加文件」下载到这个交互库。\r\n\r\n当然，你可以选择不使用交互库，自己通过标准输入输出来通信。\r\n\r\nC++ 与 C++11 的 `interaction.hpp` 将包含三个原型如下的函数：\r\n\r\n```cpp\r\nint get();\r\nint lca(int x, int y);\r\nvoid submit(int rt);\r\n```\r\n\r\n其中的两个参数代表查询的两个点的编号。返回值为它们 LCA 的编号。\r\n\r\n为了方便理解交互的流程，菜鸡 cdecl 设置了一个分数为 $0$ 的 Subtask，并附上了一份 AC 代码。具体参考 `数据范围与提示`。"},{"title":"数据范围与提示","type":"limit_and_hint","format":"markdown","require":["katex"],"content":"Subtask 0（0 分）：$2\\le n\\le2006$，保证根是 $1$ 和 $\\lfloor\\frac n2\\rfloor$ 的 LCA。\r\n\r\nSubtask 1（10 分）：$n=1919$，保证树是一条链。\r\n\r\nSubtask 2（15 分）：$n=1926$，保证树是一朵菊花，且根的度数为 $n-1$。\r\n\r\nSubtask 2（10 分）：$n=2047$，保证树是一棵满二叉树，且根是整棵树的重心。\r\n\r\nSubtask 3（65 分）：$n=2333$。\r\n\r\n每个 Subtask 的分数均等于其中每个测试点分数的和。\r\n\r\n令 **`lca`** 操作的操作次数为 $op$，具体计分标准如下：\r\n\r\n1. 如果 $0\\le op<n$，您将获得该测试点 $100\\%$ 的分数。\r\n2. 如果 $n\\le op<10n$，您将获得该测试点 $\\left\\lfloor1-\\frac{99(op-n)^2}{8100n^2}\\right\\rfloor$ 的分数。\r\n3. 如果 $op\\ge 10n$，您将获得 $1\\%$ 的好成绩。\r\n4. 如果超时，您将获得 $0$ 分的好成绩。\r\n5. 如果返回值是错的，您将获得 $0$ 分的好成绩。\r\n\r\n### Subtask 0 的 AC 代码\r\n\r\n```cpp\r\n#include \"interaction.hpp\"\r\nint n;\r\nint main() { n = get(), submit(lca(1, n / 2)); }\r\n```"}]}